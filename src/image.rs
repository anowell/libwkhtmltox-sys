/* automatically generated by rust-bindgen 0.57.0 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wkhtmltoimage_global_settings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wkhtmltoimage_converter {
    _unused: [u8; 0],
}
pub type wkhtmltoimage_str_callback = ::std::option::Option<
    unsafe extern "C" fn(
        converter: *mut wkhtmltoimage_converter,
        str_: *const ::std::os::raw::c_char,
    ),
>;
pub type wkhtmltoimage_int_callback = ::std::option::Option<
    unsafe extern "C" fn(converter: *mut wkhtmltoimage_converter, val: ::std::os::raw::c_int),
>;
pub type wkhtmltoimage_void_callback =
    ::std::option::Option<unsafe extern "C" fn(converter: *mut wkhtmltoimage_converter)>;
extern crate libloading;
pub struct wkhtmltox {
    __library: libloading::Library,
    pub wkhtmltoimage_init: Result<
        unsafe extern "C" fn(use_graphics: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        libloading::Error,
    >,
    pub wkhtmltoimage_deinit:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, libloading::Error>,
    pub wkhtmltoimage_extended_qt:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, libloading::Error>,
    pub wkhtmltoimage_version:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, libloading::Error>,
    pub wkhtmltoimage_create_global_settings:
        Result<unsafe extern "C" fn() -> *mut wkhtmltoimage_global_settings, libloading::Error>,
    pub wkhtmltoimage_set_global_setting: Result<
        unsafe extern "C" fn(
            settings: *mut wkhtmltoimage_global_settings,
            name: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        libloading::Error,
    >,
    pub wkhtmltoimage_get_global_setting: Result<
        unsafe extern "C" fn(
            settings: *mut wkhtmltoimage_global_settings,
            name: *const ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_char,
            vs: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        libloading::Error,
    >,
    pub wkhtmltoimage_create_converter: Result<
        unsafe extern "C" fn(
            settings: *mut wkhtmltoimage_global_settings,
            data: *const ::std::os::raw::c_char,
        ) -> *mut wkhtmltoimage_converter,
        libloading::Error,
    >,
    pub wkhtmltoimage_destroy_converter:
        Result<unsafe extern "C" fn(converter: *mut wkhtmltoimage_converter), libloading::Error>,
    pub wkhtmltoimage_set_debug_callback: Result<
        unsafe extern "C" fn(
            converter: *mut wkhtmltoimage_converter,
            cb: wkhtmltoimage_str_callback,
        ),
        libloading::Error,
    >,
    pub wkhtmltoimage_set_info_callback: Result<
        unsafe extern "C" fn(
            converter: *mut wkhtmltoimage_converter,
            cb: wkhtmltoimage_str_callback,
        ),
        libloading::Error,
    >,
    pub wkhtmltoimage_set_warning_callback: Result<
        unsafe extern "C" fn(
            converter: *mut wkhtmltoimage_converter,
            cb: wkhtmltoimage_str_callback,
        ),
        libloading::Error,
    >,
    pub wkhtmltoimage_set_error_callback: Result<
        unsafe extern "C" fn(
            converter: *mut wkhtmltoimage_converter,
            cb: wkhtmltoimage_str_callback,
        ),
        libloading::Error,
    >,
    pub wkhtmltoimage_set_phase_changed_callback: Result<
        unsafe extern "C" fn(
            converter: *mut wkhtmltoimage_converter,
            cb: wkhtmltoimage_void_callback,
        ),
        libloading::Error,
    >,
    pub wkhtmltoimage_set_progress_changed_callback: Result<
        unsafe extern "C" fn(
            converter: *mut wkhtmltoimage_converter,
            cb: wkhtmltoimage_int_callback,
        ),
        libloading::Error,
    >,
    pub wkhtmltoimage_set_finished_callback: Result<
        unsafe extern "C" fn(
            converter: *mut wkhtmltoimage_converter,
            cb: wkhtmltoimage_int_callback,
        ),
        libloading::Error,
    >,
    pub wkhtmltoimage_convert: Result<
        unsafe extern "C" fn(converter: *mut wkhtmltoimage_converter) -> ::std::os::raw::c_int,
        libloading::Error,
    >,
    pub wkhtmltoimage_current_phase: Result<
        unsafe extern "C" fn(converter: *mut wkhtmltoimage_converter) -> ::std::os::raw::c_int,
        libloading::Error,
    >,
    pub wkhtmltoimage_phase_count: Result<
        unsafe extern "C" fn(converter: *mut wkhtmltoimage_converter) -> ::std::os::raw::c_int,
        libloading::Error,
    >,
    pub wkhtmltoimage_phase_description: Result<
        unsafe extern "C" fn(
            converter: *mut wkhtmltoimage_converter,
            phase: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
        libloading::Error,
    >,
    pub wkhtmltoimage_progress_string: Result<
        unsafe extern "C" fn(
            converter: *mut wkhtmltoimage_converter,
        ) -> *const ::std::os::raw::c_char,
        libloading::Error,
    >,
    pub wkhtmltoimage_http_error_code: Result<
        unsafe extern "C" fn(converter: *mut wkhtmltoimage_converter) -> ::std::os::raw::c_int,
        libloading::Error,
    >,
    pub wkhtmltoimage_get_output: Result<
        unsafe extern "C" fn(
            converter: *mut wkhtmltoimage_converter,
            arg1: *mut *const ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_long,
        libloading::Error,
    >,
}
impl wkhtmltox {
    pub unsafe fn new<P>(path: P) -> Result<Self, libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let __library = libloading::Library::new(path)?;
        let wkhtmltoimage_init = __library.get(b"wkhtmltoimage_init\0").map(|sym| *sym);
        let wkhtmltoimage_deinit = __library.get(b"wkhtmltoimage_deinit\0").map(|sym| *sym);
        let wkhtmltoimage_extended_qt = __library
            .get(b"wkhtmltoimage_extended_qt\0")
            .map(|sym| *sym);
        let wkhtmltoimage_version = __library.get(b"wkhtmltoimage_version\0").map(|sym| *sym);
        let wkhtmltoimage_create_global_settings = __library
            .get(b"wkhtmltoimage_create_global_settings\0")
            .map(|sym| *sym);
        let wkhtmltoimage_set_global_setting = __library
            .get(b"wkhtmltoimage_set_global_setting\0")
            .map(|sym| *sym);
        let wkhtmltoimage_get_global_setting = __library
            .get(b"wkhtmltoimage_get_global_setting\0")
            .map(|sym| *sym);
        let wkhtmltoimage_create_converter = __library
            .get(b"wkhtmltoimage_create_converter\0")
            .map(|sym| *sym);
        let wkhtmltoimage_destroy_converter = __library
            .get(b"wkhtmltoimage_destroy_converter\0")
            .map(|sym| *sym);
        let wkhtmltoimage_set_debug_callback = __library
            .get(b"wkhtmltoimage_set_debug_callback\0")
            .map(|sym| *sym);
        let wkhtmltoimage_set_info_callback = __library
            .get(b"wkhtmltoimage_set_info_callback\0")
            .map(|sym| *sym);
        let wkhtmltoimage_set_warning_callback = __library
            .get(b"wkhtmltoimage_set_warning_callback\0")
            .map(|sym| *sym);
        let wkhtmltoimage_set_error_callback = __library
            .get(b"wkhtmltoimage_set_error_callback\0")
            .map(|sym| *sym);
        let wkhtmltoimage_set_phase_changed_callback = __library
            .get(b"wkhtmltoimage_set_phase_changed_callback\0")
            .map(|sym| *sym);
        let wkhtmltoimage_set_progress_changed_callback = __library
            .get(b"wkhtmltoimage_set_progress_changed_callback\0")
            .map(|sym| *sym);
        let wkhtmltoimage_set_finished_callback = __library
            .get(b"wkhtmltoimage_set_finished_callback\0")
            .map(|sym| *sym);
        let wkhtmltoimage_convert = __library.get(b"wkhtmltoimage_convert\0").map(|sym| *sym);
        let wkhtmltoimage_current_phase = __library
            .get(b"wkhtmltoimage_current_phase\0")
            .map(|sym| *sym);
        let wkhtmltoimage_phase_count = __library
            .get(b"wkhtmltoimage_phase_count\0")
            .map(|sym| *sym);
        let wkhtmltoimage_phase_description = __library
            .get(b"wkhtmltoimage_phase_description\0")
            .map(|sym| *sym);
        let wkhtmltoimage_progress_string = __library
            .get(b"wkhtmltoimage_progress_string\0")
            .map(|sym| *sym);
        let wkhtmltoimage_http_error_code = __library
            .get(b"wkhtmltoimage_http_error_code\0")
            .map(|sym| *sym);
        let wkhtmltoimage_get_output = __library.get(b"wkhtmltoimage_get_output\0").map(|sym| *sym);
        Ok(wkhtmltox {
            __library,
            wkhtmltoimage_init,
            wkhtmltoimage_deinit,
            wkhtmltoimage_extended_qt,
            wkhtmltoimage_version,
            wkhtmltoimage_create_global_settings,
            wkhtmltoimage_set_global_setting,
            wkhtmltoimage_get_global_setting,
            wkhtmltoimage_create_converter,
            wkhtmltoimage_destroy_converter,
            wkhtmltoimage_set_debug_callback,
            wkhtmltoimage_set_info_callback,
            wkhtmltoimage_set_warning_callback,
            wkhtmltoimage_set_error_callback,
            wkhtmltoimage_set_phase_changed_callback,
            wkhtmltoimage_set_progress_changed_callback,
            wkhtmltoimage_set_finished_callback,
            wkhtmltoimage_convert,
            wkhtmltoimage_current_phase,
            wkhtmltoimage_phase_count,
            wkhtmltoimage_phase_description,
            wkhtmltoimage_progress_string,
            wkhtmltoimage_http_error_code,
            wkhtmltoimage_get_output,
        })
    }
    pub unsafe fn wkhtmltoimage_init(
        &self,
        use_graphics: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .wkhtmltoimage_init
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(use_graphics)
    }
    pub unsafe fn wkhtmltoimage_deinit(&self) -> ::std::os::raw::c_int {
        let sym = self
            .wkhtmltoimage_deinit
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn wkhtmltoimage_extended_qt(&self) -> ::std::os::raw::c_int {
        let sym = self
            .wkhtmltoimage_extended_qt
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn wkhtmltoimage_version(&self) -> *const ::std::os::raw::c_char {
        let sym = self
            .wkhtmltoimage_version
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn wkhtmltoimage_create_global_settings(
        &self,
    ) -> *mut wkhtmltoimage_global_settings {
        let sym = self
            .wkhtmltoimage_create_global_settings
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn wkhtmltoimage_set_global_setting(
        &self,
        settings: *mut wkhtmltoimage_global_settings,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .wkhtmltoimage_set_global_setting
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(settings, name, value)
    }
    pub unsafe fn wkhtmltoimage_get_global_setting(
        &self,
        settings: *mut wkhtmltoimage_global_settings,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
        vs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .wkhtmltoimage_get_global_setting
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(settings, name, value, vs)
    }
    pub unsafe fn wkhtmltoimage_create_converter(
        &self,
        settings: *mut wkhtmltoimage_global_settings,
        data: *const ::std::os::raw::c_char,
    ) -> *mut wkhtmltoimage_converter {
        let sym = self
            .wkhtmltoimage_create_converter
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(settings, data)
    }
    pub unsafe fn wkhtmltoimage_destroy_converter(
        &self,
        converter: *mut wkhtmltoimage_converter,
    ) -> () {
        let sym = self
            .wkhtmltoimage_destroy_converter
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(converter)
    }
    pub unsafe fn wkhtmltoimage_set_debug_callback(
        &self,
        converter: *mut wkhtmltoimage_converter,
        cb: wkhtmltoimage_str_callback,
    ) -> () {
        let sym = self
            .wkhtmltoimage_set_debug_callback
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(converter, cb)
    }
    pub unsafe fn wkhtmltoimage_set_info_callback(
        &self,
        converter: *mut wkhtmltoimage_converter,
        cb: wkhtmltoimage_str_callback,
    ) -> () {
        let sym = self
            .wkhtmltoimage_set_info_callback
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(converter, cb)
    }
    pub unsafe fn wkhtmltoimage_set_warning_callback(
        &self,
        converter: *mut wkhtmltoimage_converter,
        cb: wkhtmltoimage_str_callback,
    ) -> () {
        let sym = self
            .wkhtmltoimage_set_warning_callback
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(converter, cb)
    }
    pub unsafe fn wkhtmltoimage_set_error_callback(
        &self,
        converter: *mut wkhtmltoimage_converter,
        cb: wkhtmltoimage_str_callback,
    ) -> () {
        let sym = self
            .wkhtmltoimage_set_error_callback
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(converter, cb)
    }
    pub unsafe fn wkhtmltoimage_set_phase_changed_callback(
        &self,
        converter: *mut wkhtmltoimage_converter,
        cb: wkhtmltoimage_void_callback,
    ) -> () {
        let sym = self
            .wkhtmltoimage_set_phase_changed_callback
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(converter, cb)
    }
    pub unsafe fn wkhtmltoimage_set_progress_changed_callback(
        &self,
        converter: *mut wkhtmltoimage_converter,
        cb: wkhtmltoimage_int_callback,
    ) -> () {
        let sym = self
            .wkhtmltoimage_set_progress_changed_callback
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(converter, cb)
    }
    pub unsafe fn wkhtmltoimage_set_finished_callback(
        &self,
        converter: *mut wkhtmltoimage_converter,
        cb: wkhtmltoimage_int_callback,
    ) -> () {
        let sym = self
            .wkhtmltoimage_set_finished_callback
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(converter, cb)
    }
    pub unsafe fn wkhtmltoimage_convert(
        &self,
        converter: *mut wkhtmltoimage_converter,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .wkhtmltoimage_convert
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(converter)
    }
    pub unsafe fn wkhtmltoimage_current_phase(
        &self,
        converter: *mut wkhtmltoimage_converter,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .wkhtmltoimage_current_phase
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(converter)
    }
    pub unsafe fn wkhtmltoimage_phase_count(
        &self,
        converter: *mut wkhtmltoimage_converter,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .wkhtmltoimage_phase_count
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(converter)
    }
    pub unsafe fn wkhtmltoimage_phase_description(
        &self,
        converter: *mut wkhtmltoimage_converter,
        phase: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char {
        let sym = self
            .wkhtmltoimage_phase_description
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(converter, phase)
    }
    pub unsafe fn wkhtmltoimage_progress_string(
        &self,
        converter: *mut wkhtmltoimage_converter,
    ) -> *const ::std::os::raw::c_char {
        let sym = self
            .wkhtmltoimage_progress_string
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(converter)
    }
    pub unsafe fn wkhtmltoimage_http_error_code(
        &self,
        converter: *mut wkhtmltoimage_converter,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .wkhtmltoimage_http_error_code
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(converter)
    }
    pub unsafe fn wkhtmltoimage_get_output(
        &self,
        converter: *mut wkhtmltoimage_converter,
        arg1: *mut *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_long {
        let sym = self
            .wkhtmltoimage_get_output
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(converter, arg1)
    }
}
